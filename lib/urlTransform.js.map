{"version":3,"sources":["../src/urlTransform.js"],"names":["urlTransform","rxClean","url","params","options","usedKeys","urlWithParams","Object","keys","reduce","key","value","rx","RegExp","replace","protocol","host","path","cleanURL","usedKeysArray","length","urlObject","split","arrayFormat","delimiter","qsParseOptions","mergeParams","parse","qsStringifyOptions","urlStringParams","stringify"],"mappings":"AAAA;;;;;;;;kBAkBwBA,Y;;AAhBxB;;;;AACA;;AACA;;;;AACA;;;;;;AAEA;AACA,IAAMC,UAAU,wBAAhB;;AAEA;;;;;;;;AAQe,SAASD,YAAT,CAAsBE,GAAtB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4C;AACzD,MAAI,CAACF,GAAL,EAAU;AAAE,WAAO,EAAP;AAAY;AACxBC,aAAWA,SAAS,EAApB;AACA,MAAME,WAAW,EAAjB;;AAEA,MAAMC,gBAAgBC,OAAOC,IAAP,CAAYL,MAAZ,EAAoBM,MAApB,CAA2B,UAACP,GAAD,EAAMQ,GAAN,EAAa;AAC5D,QAAMC,QAAQR,OAAOO,GAAP,CAAd;AACA,QAAME,KAAK,IAAIC,MAAJ,WAAmBH,GAAnB,aAA8BA,GAA9B,QAAsC,GAAtC,CAAX;AACA,WAAOR,IAAIY,OAAJ,CAAYF,EAAZ,EAAgB,YAAK;AAC1BP,eAASK,GAAT,IAAgBC,KAAhB;AACA,aAAOA,KAAP;AACD,KAHM,CAAP;AAID,GAPqB,EAOnBT,GAPmB,CAAtB;;AAUA,MAAI,CAACI,aAAL,EAAoB;AAAE,WAAOA,aAAP;AAAuB;;AAfY,eAgBxB,gBAAMA,aAAN,CAhBwB;AAAA,MAgBjDS,QAhBiD,UAgBjDA,QAhBiD;AAAA,MAgBvCC,IAhBuC,UAgBvCA,IAhBuC;AAAA,MAgBjCC,IAhBiC,UAgBjCA,IAhBiC;;AAiBzD,MAAMC,WAAYF,IAAD,GACZD,QADY,UACCC,IADD,GACQC,KAAKH,OAAL,CAAab,OAAb,EAAsB,EAAtB,CADR,GAEfgB,KAAKH,OAAL,CAAab,OAAb,EAAsB,EAAtB,CAFF;AAGA,MAAMkB,gBAAgBZ,OAAOC,IAAP,CAAYH,QAAZ,CAAtB;AACA,MAAIc,cAAcC,MAAd,KAAyBb,OAAOC,IAAP,CAAYL,MAAZ,EAAoBiB,MAAjD,EAAyD;AACvD,QAAMC,YAAYH,SAASI,KAAT,CAAe,GAAf,CAAlB;AACAlB,gBAAYA,UAAU,EAAtB;AAFuD,mBAGpBA,OAHoB;AAAA,QAG/CmB,WAH+C,YAG/CA,WAH+C;AAAA,QAGlCC,SAHkC,YAGlCA,SAHkC;;AAIvD,QAAMC;AACJF,8BADI;AAEJC;AAFI,OAGDpB,QAAQqB,cAHP,CAAN;AAKA,QAAMC,cAAc,qBACjBL,UAAU,CAAV,KAAgB,aAAGM,KAAH,CAASN,UAAU,CAAV,CAAT,EAAuBI,cAAvB,CADC,EAElB,oBAAKtB,MAAL,EAAagB,aAAb,CAFkB,CAApB;AAIA,QAAMS;AACJL,8BADI;AAEJC;AAFI,OAGDpB,QAAQwB,kBAHP,CAAN;AAKA,QAAMC,kBAAkB,aAAGC,SAAH,CAAaJ,WAAb,EAA0BE,kBAA1B,CAAxB;AACA,WAAUP,UAAU,CAAV,CAAV,SAA0BQ,eAA1B;AACD;AACD,SAAOX,QAAP;AACD","file":"urlTransform.js","sourcesContent":["\"use strict\";\n\nimport qs from \"qs\";\nimport { parse } from \"url\";\nimport omit from \"./utils/omit\";\nimport merge from \"./utils/merge\";\n\n/* eslint no-useless-escape: 0 */\nconst rxClean = /(\\(:[^\\)]+\\)|:[^\\/]+)/g;\n\n/**\n * Url modification\n * @param  {String} url     url template\n * @param  {Object} params  params for url template\n * @param  {Object} options transformation options, accepts +delimiter+, +arrayFormat+,\n *                          +qsStringifyOptions+ and +qsParseOptions+\n * @return {String}         result url\n */\nexport default function urlTransform(url, params, options) {\n  if (!url) { return \"\"; }\n  params || (params = {});\n  const usedKeys = {};\n\n  const urlWithParams = Object.keys(params).reduce((url, key)=> {\n    const value = params[key];\n    const rx = new RegExp(`(\\\\(:${key}\\\\)|:${key})`, \"g\");\n    return url.replace(rx, ()=> {\n      usedKeys[key] = value;\n      return value;\n    });\n  }, url);\n\n\n  if (!urlWithParams) { return urlWithParams; }\n  const { protocol, host, path } = parse(urlWithParams);\n  const cleanURL = (host) ?\n    `${protocol}//${host}${path.replace(rxClean, \"\")}` :\n    path.replace(rxClean, \"\");\n  const usedKeysArray = Object.keys(usedKeys);\n  if (usedKeysArray.length !== Object.keys(params).length) {\n    const urlObject = cleanURL.split(\"?\");\n    options || (options = {});\n    const { arrayFormat, delimiter } = options;\n    const qsParseOptions = {\n      arrayFormat,\n      delimiter,\n      ...options.qsParseOptions\n    };\n    const mergeParams = merge(\n      (urlObject[1] && qs.parse(urlObject[1], qsParseOptions)),\n      omit(params, usedKeysArray)\n    );\n    const qsStringifyOptions = {\n      arrayFormat,\n      delimiter,\n      ...options.qsStringifyOptions\n    };\n    const urlStringParams = qs.stringify(mergeParams, qsStringifyOptions);\n    return `${urlObject[0]}?${urlStringParams}`;\n  }\n  return cleanURL;\n}\n"]}